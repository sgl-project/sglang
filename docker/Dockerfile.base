# Optimized Shared base Dockerfile for SGLang with multi-stage builds
# syntax=docker/dockerfile:1.4

# Build arguments that affect base image selection
ARG CUDA_VERSION=12.6.1
ARG UBUNTU_VERSION=22.04

# ================================
# Stage 1: System Dependencies
# ================================
FROM nvidia/cuda:${CUDA_VERSION}-cudnn-devel-ubuntu${UBUNTU_VERSION} AS system-deps

# Build arguments for this stage
ARG CMAKE_BUILD_PARALLEL_LEVEL=4

# Environment variables common to all environments - set early for better caching
ENV DEBIAN_FRONTEND=noninteractive \
    CUDA_HOME=/usr/local/cuda \
    GDRCOPY_HOME=/usr/src/gdrdrv-2.4.4/ \
    CMAKE_BUILD_PARALLEL_LEVEL=${CMAKE_BUILD_PARALLEL_LEVEL}

# Add GKE default lib and bin locations
ENV PATH="${PATH}:/usr/local/nvidia/bin" \
    LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:/usr/local/nvidia/lib:/usr/local/nvidia/lib64"

# Set timezone first (rarely changes, good for caching)
RUN echo 'tzdata tzdata/Areas select America' | debconf-set-selections \
 && echo 'tzdata tzdata/Zones/America select Los_Angeles' | debconf-set-selections

# Install Python repository and system packages in optimized layers
RUN --mount=type=cache,target=/var/cache/apt \
    --mount=type=cache,target=/var/lib/apt \
    apt-get update && \
    apt-get install -y --no-install-recommends \
        software-properties-common \
        wget \
        curl \
        ca-certificates \
    && add-apt-repository ppa:deadsnakes/ppa -y \
    && apt-get update

# Install Python (pinned versions for cache stability)
RUN --mount=type=cache,target=/var/cache/apt \
    --mount=type=cache,target=/var/lib/apt \
    apt-get install -y --no-install-recommends \
        python3.12=3.12.3-1+jammy1 \
        python3.12-dev=3.12.3-1+jammy1 \
        python3.12-venv=3.12.3-1+jammy1 \
        python3.10-venv \
    && update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.10 1 \
    && update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.12 2 \
    && update-alternatives --set python3 /usr/bin/python3.12 \
    && ln -sf /usr/bin/python3.12 /usr/bin/python

# Install pip separately to leverage cache
RUN --mount=type=cache,target=/root/.cache/pip \
    wget -O /tmp/get-pip.py https://bootstrap.pypa.io/get-pip.py \
    && python3 /tmp/get-pip.py \
    && rm /tmp/get-pip.py

# ================================
# Stage 2: Development Tools
# ================================
FROM system-deps AS dev-tools

# Install build essentials and development tools (heavy packages)
RUN --mount=type=cache,target=/var/cache/apt \
    --mount=type=cache,target=/var/lib/apt \
    apt-get install -y --no-install-recommends \
        build-essential \
        cmake \
        ninja-build \
        git \
        git-lfs \
        pkg-config \
        libssl-dev \
        ccache \
        bear

# Install system libraries in chunks for better caching
RUN --mount=type=cache,target=/var/cache/apt \
    --mount=type=cache,target=/var/lib/apt \
    apt-get install -y --no-install-recommends \
        libopenmpi-dev \
        libnuma1 \
        libnuma-dev \
        libibverbs-dev \
        libibverbs1 \
        libibumad3 \
        librdmacm1 \
        libnl-3-200 \
        libnl-route-3-200 \
        libnl-route-3-dev \
        libnl-3-dev \
        ibverbs-providers \
        infiniband-diags \
        perftest

RUN --mount=type=cache,target=/var/cache/apt \
    --mount=type=cache,target=/var/lib/apt \
    apt-get install -y --no-install-recommends \
        libgoogle-glog-dev \
        libgtest-dev \
        libjsoncpp-dev \
        libunwind-dev \
        libboost-all-dev \
        libgrpc-dev \
        libgrpc++-dev \
        libprotobuf-dev \
        protobuf-compiler \
        protobuf-compiler-grpc \
        pybind11-dev \
        libhiredis-dev \
        libcurl4-openssl-dev \
        libczmq4 \
        libczmq-dev \
        libfabric-dev \
        patchelf

# Install additional development packages
RUN --mount=type=cache,target=/var/cache/apt \
    --mount=type=cache,target=/var/lib/apt \
    apt-get install -y --no-install-recommends \
        devscripts \
        debhelper \
        fakeroot \
        dkms \
        check \
        libsubunit0 \
        libsubunit-dev \
        netcat-openbsd \
        kmod \
        unzip \
        openssh-server

# ================================
# Stage 3: User Tools & Environment
# ================================
FROM dev-tools AS user-env

# Install user environment tools
RUN --mount=type=cache,target=/var/cache/apt \
    --mount=type=cache,target=/var/lib/apt \
    apt-get install -y --no-install-recommends \
        vim \
        tmux \
        htop \
        zsh \
        tree \
        silversearcher-ag \
        cloc \
        less \
        lsof \
        locales \
        gnupg

# Set up locale
RUN locale-gen en_US.UTF-8
ENV LANG=en_US.UTF-8 \
    LANGUAGE=en_US:en \
    LC_ALL=en_US.UTF-8

# Install oh-my-zsh and plugins (cached by git clone URLs)
RUN --mount=type=cache,target=/tmp/.zsh-cache \
    sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended \
    && git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions \
    && git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting

# ================================
# Stage 4: External Tools Download
# ================================
FROM user-env AS tools-download

# Download and install external tools in parallel-friendly way
WORKDIR /tmp/tools

# Download tools concurrently where possible
RUN --mount=type=cache,target=/tmp/tools-cache \
    # diff-so-fancy
    curl -LSso diff-so-fancy https://github.com/so-fancy/diff-so-fancy/releases/download/v1.4.4/diff-so-fancy \
    && chmod +x diff-so-fancy \
    && mv diff-so-fancy /usr/local/bin/ \
    # clang-format  
    && curl -LSso clang-format https://github.com/muttleyxd/clang-tools-static-binaries/releases/download/master-32d3ac78/clang-format-16_linux-amd64 \
    && chmod +x clang-format \
    && mv clang-format /usr/local/bin/

# Download and install clangd
RUN --mount=type=cache,target=/tmp/tools-cache \
    curl -L https://github.com/clangd/clangd/releases/download/18.1.3/clangd-linux-18.1.3.zip -o clangd.zip \
    && unzip clangd.zip \
    && cp -r clangd_18.1.3/bin/* /usr/local/bin/ \
    && cp -r clangd_18.1.3/lib/* /usr/local/lib/ \
    && rm -rf clangd_18.1.3 clangd.zip

# Download and install CMake
RUN --mount=type=cache,target=/tmp/tools-cache \
    CMAKE_VERSION=3.31.1 \
    && wget -q https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/cmake-${CMAKE_VERSION}-linux-x86_64.tar.gz \
    && tar -xf cmake-${CMAKE_VERSION}-linux-x86_64.tar.gz \
    && cp -r cmake-${CMAKE_VERSION}-linux-x86_64/bin/* /usr/local/bin/ \
    && cp -r cmake-${CMAKE_VERSION}-linux-x86_64/share/* /usr/local/share/ \
    && rm -rf cmake-${CMAKE_VERSION}-linux-x86_64*

# Download and install Just
RUN --mount=type=cache,target=/tmp/tools-cache \
    curl --proto '=https' --tlsv1.2 -sSf https://just.systems/install.sh | bash -s -- --to /usr/local/bin

# ================================
# Stage 5: Python Environment
# ================================
FROM tools-download AS python-env

# Install common Python packages with caching
RUN --mount=type=cache,target=/root/.cache/pip \
    python3 -m pip install --no-cache-dir --upgrade pip setuptools wheel html5lib six

# Install Python development tools
RUN --mount=type=cache,target=/root/.cache/pip \
    python3 -m pip install --no-cache-dir \
        pre-commit==3.8.0 \
        pytest==8.3.2 \
        black==24.8.0 \
        isort==5.13.2 \
        icdiff==2.0.7 \
        uv==0.4.4 \
        wheel \
        scikit-build-core==0.10.4

# Install common analysis and utility packages  
RUN --mount=type=cache,target=/root/.cache/pip \
    python3 -m pip install --no-cache-dir \
        datamodel_code_generator==0.25.8 \
        pandas==2.2.2 \
        matplotlib==3.9.2 \
        tabulate==0.9.0

# ================================
# Stage 6: Rust Toolchain
# ================================
FROM python-env AS rust-env

# Install Rust toolchain (for sgl-router)
ENV PATH="/root/.cargo/bin:${PATH}"
RUN --mount=type=cache,target=/usr/local/cargo/registry \
    --mount=type=cache,target=/tmp/rustup-cache \
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y \
    && rustc --version && cargo --version

# ================================
# Stage 7: Configuration Files
# ================================
FROM rust-env AS configured

# Add yank script
COPY --chown=root:root <<-"EOF" /usr/local/bin/yank
#!/bin/bash
put() {
  esc=$1
  test -n "$TMUX" -o -z "${TERM##screen*}" && esc="\033Ptmux;\033$esc\033\\"
  printf "$esc"
}
put "\033]52;c;!\a"
buf=$( cat "$@" )
len=$( printf %s "$buf" | wc -c ) max=74994
test $len -gt $max && echo "$0: input is $(( len - max )) bytes too long" >&2
put "\033]52;c;$( printf %s "$buf" | head -c $max | base64 | tr -d '\r\n' )\a"
test -n "$TMUX" && tmux set-buffer "$buf" ||:
EOF

RUN chmod +x /usr/local/bin/yank

# Configure Vim
COPY --chown=root:root <<-"EOF" /root/.vimrc
function! Yank(text) abort
  let escape = system('yank', a:text)
  if v:shell_error
    echoerr escape
  else
    call writefile([escape], '/dev/tty', 'b')
  endif
endfunction

noremap <silent> <Leader>y y:<C-U>call Yank(@0)<CR>
autocmd TextYankPost * call Yank(join(v:event.regcontents, "\n"))

set number
syntax on
set mouse=a
filetype indent on
set autoindent nosmartindent
set smarttab
set expandtab
set shiftwidth=4
set softtabstop=4
set colorcolumn=120
highlight ColorColumn ctermbg=5
set laststatus=2
set statusline=%<%f\ %h%m%r%=%{\"[\".(&fenc==\"\"?&enc:&fenc).((exists(\"+bomb\")\ &&\ &bomb)?\",B\":\"\").\"]\ \"}%k\ %-14.(%l,%c%V%)\ %P
set backspace=2
set encoding=utf-8
set fileencoding=utf-8
EOF

# Configure tmux
COPY --chown=root:root <<-"EOF" /root/.tmux.conf
set -g pane-border-style fg='#742727',bg=black
set -g pane-active-border-style fg=red,bg=black
set -g status-style bg='#0C8A92',fg=black
set-option -g prefix `
unbind C-b
bind-key ` send-prefix
unbind '"'
bind - splitw -v -c '#{pane_current_path}'
unbind '%'
bind = splitw -h -c '#{pane_current_path}'
bind-key -T copy-mode-vi Y send-keys -X copy-pipe 'yank > #{pane_tty}'
set-window-option -g mode-keys vi
set-option -g escape-time 0
set-option -g base-index 1
set-window-option -g mouse on
set -g history-limit 100000
EOF

# Configure zsh
COPY --chown=root:root <<-"EOF" /root/.zshrc
export ZSH="/root/.oh-my-zsh"
ZSH_THEME="robbyrussell"
plugins=(git z zsh-autosuggestions zsh-syntax-highlighting)
source $ZSH/oh-my-zsh.sh
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'
alias vi='vim'
HISTSIZE=10000
SAVEHIST=10000
setopt HIST_IGNORE_ALL_DUPS
setopt HIST_FIND_NO_DUPS
setopt INC_APPEND_HISTORY
EOF

# Configure Git
RUN git config --global core.editor "vim" \
    && git config --global core.whitespace "fix,-indent-with-non-tab,trailing-space,cr-at-eol" \
    && git config --global core.pager "diff-so-fancy | less --tabs=4 -RFX" \
    && git config --global color.ui true \
    && git config --global color."diff-highlight".oldNormal "red bold" \
    && git config --global color."diff-highlight".oldHighlight "red bold 52" \
    && git config --global color."diff-highlight".newNormal "green bold" \
    && git config --global color."diff-highlight".newHighlight "green bold 22" \
    && git config --global color.diff.meta "11" \
    && git config --global color.diff.frag "magenta bold" \
    && git config --global color.diff.commit "yellow bold" \
    && git config --global color.diff.old "red bold" \
    && git config --global color.diff.new "green bold" \
    && git config --global color.diff.whitespace "red reverse" \
    && git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset - %s %Cgreen(%cr) %C(bold blue)<%an>%Creset%C(auto)%d%Creset' --abbrev-commit --" \
    && git config --global http.sslVerify false \
    && git config --global pull.rebase true

# ================================
# Stage 8: CUDA-Specific Components
# ================================
FROM configured AS cuda-deps

# GDRCopy installation (cached by git clone)
RUN --mount=type=cache,target=/tmp/gdrcopy-cache \
    mkdir -p /tmp/gdrcopy && cd /tmp \
    && git clone https://github.com/NVIDIA/gdrcopy.git -b v2.4.4 \
    && cd gdrcopy/packages \
    && CUDA=/usr/local/cuda ./build-deb-packages.sh \
    && dpkg -i gdrdrv-dkms_*.deb libgdrapi_*.deb gdrcopy-tests_*.deb gdrcopy_*.deb \
    && cd / && rm -rf /tmp/gdrcopy

# Fix DeepEP IBGDA symlink
RUN ln -sf /usr/lib/x86_64-linux-gnu/libmlx5.so.1 /usr/lib/x86_64-linux-gnu/libmlx5.so

# ================================
# Stage 9: Source Code Preparation
# ================================
FROM scratch AS local_src
COPY . /src

FROM cuda-deps AS build-ready

# Build arguments for source handling
ARG BRANCH_TYPE=remote

# Copy source code with cache mount for better performance
COPY --from=local_src /src /tmp/local_src

# Prepare SGLang source code
WORKDIR /sgl-workspace
RUN --mount=type=cache,target=/tmp/git-cache \
    if [ "$BRANCH_TYPE" = "local" ]; then \
        cp -r /tmp/local_src /sgl-workspace/sglang; \
    else \
        git clone --depth=1 https://github.com/sgl-project/sglang.git /sgl-workspace/sglang; \
    fi \
    && rm -rf /tmp/local_src

# Final cleanup and workspace setup
WORKDIR /sgl-workspace

# Label the image with build information
LABEL org.opencontainers.image.title="SGLang Base Image" \
      org.opencontainers.image.description="Optimized base image for SGLang with multi-stage builds" \
      org.opencontainers.image.vendor="SGLang Project" \
      build.cuda_version="${CUDA_VERSION}" \
      build.ubuntu_version="${UBUNTU_VERSION}"