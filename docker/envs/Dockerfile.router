# Optimized Router SGLang Docker environment - Lightweight router service
# syntax=docker/dockerfile:1.4

ARG PYTHON_VERSION=3.12
ARG UBUNTU_VERSION=24.04

# ================================
# Stage 1: Base System Setup
# ================================
FROM ubuntu:${UBUNTU_VERSION} AS base

# Environment variables
ENV PATH="/root/.local/bin:${PATH}" \
    DEBIAN_FRONTEND=noninteractive \
    UV_HTTP_TIMEOUT=500 \
    VIRTUAL_ENV="/opt/venv" \
    UV_PYTHON_INSTALL_DIR=/opt/uv/python \
    UV_LINK_MODE="copy"

ENV PATH="$VIRTUAL_ENV/bin:$PATH"

# Set timezone and install minimal dependencies
RUN echo 'tzdata tzdata/Areas select America' | debconf-set-selections \
    && echo 'tzdata tzdata/Zones/America select Los_Angeles' | debconf-set-selections \
    && apt-get update \
    && apt-get install -y --no-install-recommends \
        ca-certificates \
        curl \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Install uv package manager
RUN --mount=type=cache,target=/tmp/uv-cache \
    curl -LsSf https://astral.sh/uv/install.sh | sh

# Create Python virtual environment
RUN uv venv --python ${PYTHON_VERSION} --seed ${VIRTUAL_ENV}

# ================================
# Stage 2: Build Dependencies
# ================================
FROM base AS build-deps

# Install build dependencies
RUN --mount=type=cache,target=/var/cache/apt \
    --mount=type=cache,target=/var/lib/apt \
    apt-get update \
    && apt-get install -y --no-install-recommends \
        git \
        build-essential \
        libssl-dev \
        pkg-config \
        protobuf-compiler

# ================================
# Stage 3: Rust Toolchain
# ================================
FROM build-deps AS rust-toolchain

# Install Rust toolchain with caching
ENV PATH="/root/.cargo/bin:${PATH}"
RUN --mount=type=cache,target=/usr/local/cargo/registry \
    --mount=type=cache,target=/tmp/rustup-cache \
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y \
    && rustc --version && cargo --version && protoc --version

# ================================
# Stage 4: Source Code Download
# ================================
FROM rust-toolchain AS source-download

ARG SGLANG_REPO_REF=main

# Download SGLang source with git cache
RUN --mount=type=cache,target=/tmp/git-cache \
    cd /opt \
    && git clone --depth=1 https://github.com/sgl-project/sglang.git \
    && cd sglang \
    && git checkout ${SGLANG_REPO_REF}

# ================================
# Stage 5: Router Build
# ================================
FROM source-download AS router-build

WORKDIR /opt/sglang/sgl-router

# Build router with cargo cache
RUN --mount=type=cache,target=/usr/local/cargo/registry \
    --mount=type=cache,target=/opt/sglang/sgl-router/target \
    cargo build --release

# Build Python wheel with uv
RUN --mount=type=cache,target=/root/.cache/uv \
    uv build

# ================================
# Stage 6: Runtime Image
# ================================
FROM base AS runtime

# Copy the built wheel from build stage
COPY --from=router-build /opt/sglang/sgl-router/dist/*.whl /tmp/dist/

# Install the router package
RUN --mount=type=cache,target=/root/.cache/uv \
    uv pip install --force-reinstall /tmp/dist/*.whl \
    && rm -rf /tmp/dist

# Clean up build dependencies 
RUN apt-get purge -y --auto-remove curl \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Add health check
HEALTHCHECK --interval=30s --timeout=5s --start-period=10s --retries=3 \
    CMD python3 -c "import sglang_router; print('Router ready')" || exit 1

# Create non-root user for security
RUN groupadd -r sglang && useradd -r -g sglang sglang
USER sglang

# Set the entrypoint
ENTRYPOINT ["python3", "-m", "sglang_router.launch_router"]

# Default command (can be overridden)
CMD ["--host", "0.0.0.0", "--port", "8080"]

# Labels
LABEL org.opencontainers.image.title="SGLang Router" \
      org.opencontainers.image.description="Lightweight SGLang router service" \
      org.opencontainers.image.vendor="SGLang Project" \
      environment="router" \
      python_version="${PYTHON_VERSION}"
